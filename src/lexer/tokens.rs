#[derive(Debug, Clone, Copy, PartialEq)]
pub enum Token<'a> {
    Content(&'a str),
    Ident(&'a str),

    CodeBlockOpen,
    CodeBlockClose,

    String(&'a str),
    Integer(i64),
    Float(f64),
    Bool(bool),

    And,
    Or,
    Not,

    Equal,
    NotEqual,
    Greater,
    Less,
    GreaterOrEqual,
    LessOrEqual,

    Addition,
    Subtraction,
    Multiplication,
    Division,
    Remainder,
    Exponent,

    Assign,
    Increase,
    Decrease,

    LeftBracket,
    RightBracket,
    Semicolon,
    Coma,
    Dot,

    End,
    For,
    Let,
    In,

    If,
    Else,

    Continue,
    Return,
    Break,
}

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum TokenType {
    Content,
    Ident,
    CodeBlockOpen,
    CodeBlockClose,
    String,
    Integer,
    Float,
    Bool,
    And,
    Or,
    Not,
    Equal,
    NotEqual,
    Greater,
    Less,
    GreaterOrEqual,
    LessOrEqual,
    Addition,
    Subtraction,
    Multiplication,
    Division,
    Remainder,
    Exponent,
    Assign,
    Increase,
    Decrease,
    LeftBracket,
    RightBracket,
    Semicolon,
    Coma,
    Dot,
    End,
    For,
    Let,
    In,
    If,
    Else,
    Continue,
    Return,
    Break,
}

impl From<&Token<'_>> for TokenType {
    fn from(token: &Token<'_>) -> Self {
        match token {
            Token::Content(_) => TokenType::Content,
            Token::Ident(_) => TokenType::Ident,
            Token::CodeBlockOpen => TokenType::CodeBlockOpen,
            Token::CodeBlockClose => TokenType::CodeBlockClose,
            Token::String(_) => TokenType::String,
            Token::Integer(_) => TokenType::Integer,
            Token::Float(_) => TokenType::Float,
            Token::Bool(_) => TokenType::Bool,
            Token::And => TokenType::And,
            Token::Or => TokenType::Or,
            Token::Not => TokenType::Not,
            Token::Equal => TokenType::Equal,
            Token::NotEqual => TokenType::NotEqual,
            Token::Greater => TokenType::Greater,
            Token::Less => TokenType::Less,
            Token::GreaterOrEqual => TokenType::GreaterOrEqual,
            Token::LessOrEqual => TokenType::LessOrEqual,
            Token::Addition => TokenType::Addition,
            Token::Subtraction => TokenType::Subtraction,
            Token::Multiplication => TokenType::Multiplication,
            Token::Division => TokenType::Division,
            Token::Remainder => TokenType::Remainder,
            Token::Exponent => TokenType::Exponent,
            Token::Assign => TokenType::Assign,
            Token::Increase => TokenType::Increase,
            Token::Decrease => TokenType::Decrease,
            Token::LeftBracket => TokenType::LeftBracket,
            Token::RightBracket => TokenType::RightBracket,
            Token::Semicolon => TokenType::Semicolon,
            Token::Coma => TokenType::Coma,
            Token::Dot => TokenType::Dot,
            Token::End => TokenType::End,
            Token::For => TokenType::For,
            Token::Let => TokenType::Let,
            Token::In => TokenType::In,
            Token::If => TokenType::If,
            Token::Else => TokenType::Else,
            Token::Continue => TokenType::Continue,
            Token::Return => TokenType::Return,
            Token::Break => TokenType::Break,
        }
    }
}
